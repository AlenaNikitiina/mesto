{"version":3,"file":"main.js","mappings":"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","sources":["webpack://yandex.praktikum/./src/components/Api.js","webpack://yandex.praktikum/./src/components/Card.js","webpack://yandex.praktikum/./src/components/FormValidator.js","webpack://yandex.praktikum/./src/components/Section.js","webpack://yandex.praktikum/./src/components/UserInfo.js","webpack://yandex.praktikum/./src/components/Popup.js","webpack://yandex.praktikum/./src/components/PopupWithForm.js","webpack://yandex.praktikum/./src/components/PopupWithImage.js","webpack://yandex.praktikum/./src/components/PopupWithSubmmitDelete.js","webpack://yandex.praktikum/./src/utils/constants.js","webpack://yandex.praktikum/./src/pages/index.js"],"sourcesContent":["export class Api {\n  constructor({url, headers}) {\n    this._url = url;\n    this._headers = headers;\n  }\n\n  // проверка ответа от сервера. Венесено в метод, чтобы не писать одно и тоже\n  _checkServerAnswer (response) {\n    if (response.ok) {\n      return response.json(); // если все ок\n    } else {\n      return Promise.reject(`Ошибка: ${response.status} ${response.statusText}`); //если все не ок скажи ошибка\n    }\n  }\n\n  // 1 Получить информацию о пользователе обо мне\n  getUserInfo () {\n    return fetch(this._url + `/users/me`, {\n      headers: this._headers,\n    })\n    .then(this._checkServerAnswer);\n  }\n\n  // 2 Загрузка списка карточек с сервера\n  getInitialCards () {\n    return fetch(this._url + `/cards`, {\n      headers: this._headers,\n    })\n    .then(this._checkServerAnswer);\n  }\n\n  // 3 Редактирование профиля\n  editingProfile (newName, newAbout) {\n    return fetch(this._url + `/users/me`, {\n      method: 'PATCH', // заменить имя и работу\n      headers: this._headers,\n      body: JSON.stringify({\n        name: newName,\n        about: newAbout\n    })})\n    .then(this._checkServerAnswer);\n  }\n\n  // 4 Добавить новую карточку\n  uploadNewCard (name, link) {\n    return fetch(this._url + `/cards`, {\n      method: 'POST', // добавить карточку (POST)\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link,\n      })})\n      .then(this._checkServerAnswer);\n  }\n\n  // 5 Удалить карточку, ток свою\n  removeCard (id) {\n    return fetch(this._url + `/cards/` + id, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n    .then(this._checkServerAnswer);\n  };\n\n  // 6 Поменять аватар\n  updateAvatar (avatarLink) { //ссылка на нов аватар\n    return fetch(this._url + `/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatarLink,\n      })})\n      .then(this._checkServerAnswer);\n  }\n\n  // 7 Поставить лайк\n  addLike(id) {\n    return fetch(this._url + `/cards/` + id + `/likes`, {\n      method: \"PUT\",\n      headers: this._headers,\n    })\n    .then(this._checkServerAnswer);\n  }\n\n  // 7 Снять лайк\n  deleteLike(id) {\n    return fetch(this._url + `/cards/` + id + `/likes`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    })\n    .then(this._checkServerAnswer);\n  }\n\n}\n","export class Card {\n  constructor(name, link, likes, templateSelector, cardId, myUserId, ownerId, handlePreview, handleDeleteOnClick, handlePutLike) {\n    this._name = name;\n    this._link = link;\n    this._likes = likes;\n    this._cardId = cardId;\n    this._myUserId = myUserId;\n    this._ownerId = ownerId;\n    this._templateItem = document.querySelector(templateSelector).content;\n    this._handlePreview = handlePreview;\n    this._handleDeleteOnClick = handleDeleteOnClick;\n\n    this._handlePutLike = handlePutLike;\n    this._haveMyLike = false;\n\n    this._likes.forEach( (item) => {\n      if (item._id === this._myUserId) { // сравниваем со своим\n        this._haveMyLike = true;\n      }\n    });\n\n    this._canDelete = this._myUserId === this._ownerId; // если да то оставить мусорку\n\n    // клонируем уже элемент разметки\n    this._myHtmlElement = this._templateItem.querySelector('.elements__card').cloneNode(true);\n    // наполняем содержимым\n    this._myHtmlElement.querySelector('.element__title').textContent = name; //добавляем подпись под фоткой\n    this._fotoZoomOpen = this._myHtmlElement.querySelector('.element__foto'); // попап зум картинки\n    this._fotoZoomOpen.src = link; // добавили атрибут\n    this._fotoZoomOpen.alt = name;\n\n    // лайк\n    this._buttonLike = this._myHtmlElement.querySelector('.element__like'); // нашли кнопку лайка\n\n    // мусорка\n    this._trashButton = this._myHtmlElement.querySelector('.element__trash-button'); // нашли мусорку\n\n    //\n    this._setListeners();\n    //\n    this._putLikes();\n\n    if (this._haveMyLike)\n      this._buttonLike.classList.toggle('element__like_active');\n\n    // активируем мусорку, если карточка наша\n    this._trashButton.classList.add(this._canDelete ? 'element__trash-button_visible' : 'element__trash-button_hidden')\n\n  };\n\n  create () {\n    return this._myHtmlElement;\n  };\n\n  _likeIt () {\n    this._buttonLike.classList.toggle('element__like_active');\n\n    this._handlePutLike(!this._haveMyLike, this._cardId, this.updateLikesList.bind(this));\n    this._haveMyLike = !this._haveMyLike;\n  };\n\n  // _deletePhoto () {\n  deletePhoto () {\n    this._myHtmlElement.remove();\n    this._myHtmlElement = null;\n  };\n\n  _zoomPhoto (evt) {\n    this._handlePreview(this._name, this._link);\n  };\n\n  // подсчет числа лайков\n  _putLikes () {\n    const likeCount = this._myHtmlElement.querySelector('.element__like-counter'); // нашли счетчик лайков\n    likeCount.textContent = this._likes.length;\n  }\n\n  // обновление списка лайков\n  updateLikesList(likesList) {\n    this._likes = likesList;\n    this._putLikes();\n  }\n\n  // всем слушатели\n  _setListeners() {\n    this._buttonLike.addEventListener('click', () => {\n      this._likeIt();\n    });\n    if (this._canDelete) {\n      this._trashButton.addEventListener('click', () => {\n        this._handleDeleteOnClick(this._cardId, this);\n      });\n    }\n    this._fotoZoomOpen.addEventListener('click', () => {\n      this._handlePreview(this._name, this._link);\n    });\n  };\n\n};\n","export class FormValidator {\r\n  constructor(selectorsSetting, formToValid,) {\r\n    this._selectorsSetting = selectorsSetting;\r\n    this.formToValid = formToValid;\r\n    // setting = это теперь this._selectorsSetting\r\n    // formElementAll = это теперь this.formToValid (и это любая форма которую передаем при созд нов класса экземпляра)\r\n  }\r\n\r\n  // Метод, который вкл валидацию формы\r\n  enableValidation() {\r\n    this._setEventListeners();\r\n  }\r\n\r\n  // Метод, который добавляет класс с ошибкой импуту\r\n  _showInputError (inputElement, errorMessage) {\r\n    const errorElement = this.formToValid.querySelector(`.${inputElement.id}-error`); // Находим элемент ошибки внутри самой функции\r\n    inputElement.classList.add(this._selectorsSetting.inputErrorClass);  // добавьте класс ошибки элементу input\r\n    errorElement.textContent = errorMessage;\r\n    errorElement.classList.add(this._selectorsSetting.inputErrorClassActiv); // Показываем сообщение об ошибке\r\n  }\r\n\r\n  // Метод, который удаляет класс с ошибкой\r\n  _hideInputError (inputElement) {\r\n    // Находим элемент ошибки\r\n    const errorElement = this.formToValid.querySelector(`.${inputElement.id}-error`); // нашли ошибку из спана на основе уникального класса\r\n    inputElement.classList.remove(this._selectorsSetting.inputErrorClass);\r\n    errorElement.classList.remove(this._selectorsSetting.inputErrorClassActiv); // Скрываем сообщение об ошибке\r\n    errorElement.textContent = ''; // Очистим ошибку\r\n  }\r\n\r\n  // Метод, который проверяет валидность поля\r\n  _isValid (inputElement) {\r\n    if (!inputElement.validity.valid) {\r\n      // Если поле не проходит валидацию, покажи ошибку\r\n      this._showInputError(inputElement, inputElement.validationMessage); // получает параметром форму, в которой находится проверяемое поле, и само это поле\r\n    } else {\r\n      // Если проходит, скрой\r\n      this._hideInputError(inputElement);\r\n    }\r\n  }\r\n\r\n  // Метод который делает кнопку не активной. принимает массив полей ввода и элемент кнопки, состояние которой нужно менять\r\n  _toggleButtonState () {\r\n    if (this._hasInvalidInput()) {\r\n      this._buttonElement.disabled = true;\r\n      this._buttonElement.classList.add(this._selectorsSetting.buttonElementInactiv); // сделай кнопку неактивной\r\n    } else {\r\n      this._buttonElement.disabled = false;\r\n      this._buttonElement.classList.remove(this._selectorsSetting.buttonElementInactiv); // сделай кнопку активной\r\n    }\r\n  }\r\n\r\n  // 6 Метод, которая проверит все инпуты в форме валидное/нет, принимает массив полей\r\n  _hasInvalidInput() {\r\n    return this._inputList.some((inputElement) => {\r\n      return !inputElement.validity.valid; // Если поле не валидно, колбэк вернёт true Обход массива прекратится и вся функция вернёт true\r\n    })\r\n  }\r\n\r\n  // 4 Метод, который добавляет слушатель событий всем полям ввода внутри формы\r\n  _setEventListeners() {\r\n    this._inputList = Array.from(this.formToValid.querySelectorAll(this._selectorsSetting.inputSelector)); // Находим все поля внутри формы, сделаем из них массив\r\n    this._buttonElement = this.formToValid.querySelector(this._selectorsSetting.submitButtonSelector);\r\n    this._toggleButtonState(); // Вызовем ее, чтобы не ждать ввода данных в поля\r\n\r\n    // Обойдём все элементы полученной коллекции\r\n    this._inputList.forEach((inputElement) => {\r\n      // каждому полю добавим обработчик события input\r\n      inputElement.addEventListener('input', () => {\r\n        this._isValid(inputElement); // Внутри колбэка вызовем isValid,передав ей форму и проверяемый элемент\r\n        this._toggleButtonState(); // Вызовем ее и передадим ей массив полей и кнопку\r\n      });\r\n    });\r\n  }\r\n\r\n  // Метод для очистки ошибок и управления кнопкой\r\n  removeValidationErrors () {\r\n    this._toggleButtonState();\r\n\r\n    this._inputList.forEach((inputElement) => {\r\n      this._hideInputError(inputElement) // очищаем ошибки\r\n    });\r\n  }\r\n\r\n};\r\n","export class Section {\n  constructor ( { renderer }, containerSelector ) {\n    //this._renderedItems = items; // это Свойство — это массив данных, которые нужно добавить на страницу при инициализации класса. pr8\n    this._renderer = renderer; // — это функция, которая отвечает за создание и отрисовку данных на странице, она лежит в индекс.жс\n    this._container = document.querySelector(containerSelector); // контейнер куда вставляем элементы/ карточки\n  }\n\n  // метод, кот отвечает за отрисовку всех элементов\n  rendererAllItems (items) {\n    items.forEach((item) => {\n      this._renderer(item);\n    });\n  }\n\n  // который принимает DOM-элемент и добавляет его в контейнер.\n  addItem (element, inEnd) {\n    if (inEnd)\n      this._container.append(element); // принимает параметр element и вставляет его в контейнер методом append\n    else\n      this._container.prepend(element); // вставим в начало\n  }\n\n  // Метод, удаляет содержимое поля\n  //clear () { this._container.innerHTML = ''; }\n\n}\n","export class UserInfo {\n  constructor ({ nameSelector, aboutInfoSelector, avatarSelector }) {\n    this._userName = document.querySelector(nameSelector); // имя\n    this._userAboutInfo = document.querySelector(aboutInfoSelector); // инфа о себе\n    this._userAvatar = document.querySelector(avatarSelector); // фото профиля\n  }\n\n  // Метод возвращает объект с данными пользователя.пригодится когда данные пользователя нужно будет подставить в форму при открытии\n  getUserInfo () {\n    return {\n      profileName: this._userName.textContent,\n      profileAboutInfo: this._userAboutInfo.textContent,\n      profileAvatar: this._userAvatar,\n    }\n  }\n\n  // Метод который принимает новые данные пользователя и добавляет их на страницу\n  setUserInfo (newProfileName, newProfileAboutInfo) {\n    this._userName.textContent = newProfileName,\n    this._userAboutInfo.textContent = newProfileAboutInfo;\n  }\n\n  setUserAvatar(newProfileAvatar) {\n    this._userAvatar.src = newProfileAvatar;\n  }\n\n}\n","export class Popup {\n  constructor (popupSelector) {\n    this._popup = document.querySelector(popupSelector); // попап в котором находимся\n    this._handleEscClose = this._handleEscClose.bind(this); // привязали 1 раз\n  };\n\n  // Метод открытия попапов\n  open () {\n    this._popup.classList.add('popup_opened');\n    document.addEventListener('keydown', this._handleEscClose); // передаем ссылку (на кнопки можно вещать слушать документ)\n  };\n\n  // Метод закрытия попапов\n  close () {\n    this._popup.classList.remove('popup_opened');\n    document.removeEventListener('keydown', this._handleEscClose); // передаем и удаляем ссылку\n  };\n\n  // Метод, закрывает попап по нажатию на Esc\n  _handleEscClose (evt) {\n    if (evt.key === 'Escape') {\n      this.close(); }\n  };\n\n  // Метод,который добавляет слушатель клика крестику (иконке) закрытия попапа\n  setEventListeners () {\n    const popupCloseButtons = this._popup.querySelector('.popup__close-button');\n    popupCloseButtons.addEventListener('click', () => {\n      this.close();\n    });\n    // клик вне формы\n    this._popup.addEventListener('mousedown', (evt) => {\n      if (evt.target === evt.currentTarget) {\n        this.close();\n      }\n    });\n  };\n\n}\n","import { Popup } from \"./Popup.js\"\n\nexport class PopupWithForm extends Popup {\n  constructor (popupSelector, callBackSubmitForm) {\n    super(popupSelector); //  селектора попапа\n    this._callbackSubmitForm = callBackSubmitForm; // колбэк сабмита формы\n\n    this._formInputs = Array.from(this._popup.querySelectorAll('.form__input')); // сделали руками массив из всех импутов\n    this._popupForm = this._popup.querySelector('.popup__form');\n\n    //\n    this._submitButton = this._popup.querySelector('button[type=\"submit\"]'); // нашли кнопку по типу\n    this._buttonDefaultText = this._submitButton.textContent;\n\n  };\n\n  // метод, который собирает данные из всех полей формы\n  _getInputValues () {\n    const inputValues = {}; // сделали пустой обьект\n    // в него добавляем значения всех полей и присваиваем значение\n    this._formInputs.forEach((input) => {\n      inputValues[input.id] = input.value;\n    });\n    return inputValues;\n  };\n\n  // + добавлять обработчик сабмита формы родителю\n  setEventListeners () {\n    super.setEventListeners(); // метод родителя\n    this._popupForm.addEventListener('submit', this._submit.bind(this)); // добавляем обработчик сабмита формы\n  };\n\n  //\n  _submit (evt) {\n    evt.preventDefault();\n\n    this._callbackSubmitForm(this._getInputValues());\n    this.close();\n  };\n\n  //\n  close () {\n    super.close(); // вызвали родительский + допишем свой\n    this._popupForm.reset(); // сбрасываем текст в инпутах формы\n  };\n\n  // при загрузке\n  renderLoading(isSending) {\n    console.log(\"this._submitButton.textContent: \", this._submitButton.textContent);\n\n    if (isSending) {\n      this._submitButton.textContent = 'Сохранение...';\n\n      console.log('Сохранение...');\n    }\n    else {\n      this._submitButton.textContent = this._buttonDefaultText;\n    }\n  }\n}\n","import { Popup } from \"./Popup.js\";\r\n\r\nexport class PopupWithImage extends Popup {\r\n  constructor (popupSelector) {\r\n    super(popupSelector);\r\n\r\n    this._imgLink = this._popup.querySelector('.popup__image')\r\n    this._imgFigcaption = this._popup.querySelector('.popup__figcaption')\r\n\r\n  };\r\n\r\n  // перезапишем открытия попапов\r\n  open (name, link) {\r\n    super.open(); // родительский\r\n\r\n    this._imgLink.src = link;\r\n    this._imgLink.alt = name;\r\n    this._imgFigcaption.textContent = name;\r\n  };\r\n\r\n}\r\n","import { Popup } from \"./Popup.js\"\n\nexport class PopupWithSubmmitDelete extends Popup {\n  constructor(popupSelector) {\n    super(popupSelector);\n\n    this._submitForm = this._popup.querySelector('#delete-card'); //\n  }\n\n  //\n  open(handleConfirmDelete) {\n    super.open();\n    this._handleConfirmDelete = handleConfirmDelete;\n  }\n\n  //\n  setEventListeners() {\n    super.setEventListeners();\n\n    this._confirmDelete = (evt) => {\n      evt.preventDefault();\n      this._handleConfirmDelete();\n    }\n    this._submitForm.addEventListener('submit', this._confirmDelete);\n  }\n}\n\n","//// Все константы проекта\n// Формы\n//const formElementAll = document.querySelectorAll('.popup__form'); // все попапы с формами\nexport const formEdit = document.querySelector('.form__edit'); // форма редактирования профиля\nexport const formAdd = document.querySelector('.form__add'); // форма добавления карточки\nexport const formAvatar = document.querySelector('.form__avatar'); // форма добавления карточки\n// Про открытие и закрытие попапа\nexport const popupEdit = document.querySelector('.popup_edit');// нашли попапы\nexport const popupAdd = document.querySelector('.popup_add');\nexport const popupZoom = document.querySelector('.popup_zoom');\nexport const popupAll = document.querySelectorAll('.popup');\nexport const popupSelector = '.popup'\nexport const editAvatar = document.querySelector('.profile__avatar'); // img редактирование аватара\n// Находим поля формы в DOM, в которых можно изменения писать\nexport const nameInput = document.querySelector('.nameInput');\nexport const jobInput = document.querySelector('.jobInput');\nexport const titleInput = document.querySelector('.titleInput'); //из инпутов\nexport const linkInput = document.querySelector('.linkInput');\n// Куда будут заноситься изменения имени и работы\nexport const titleName = document.querySelector('.titleName');\nexport const titleJob = document.querySelector('.titleJob');\n// Кнопки открытия и закрытия попапов\nexport const buttonOpenEdit = document.querySelector('.profile__edit-button'); //кнопка редактирования профиля и открытия попапа\nexport const buttonOpenAdd = document.querySelector('.profile__add-button'); //кнопка добавления нового места\nexport const popupCloseButtons = document.querySelectorAll('.popup__close-button'); // кнопка закрыть попап, крестик\n// Шесть карточек «из коробки»\nexport const fotoCards = document.querySelector('.elements__list'); // получаем элемент. ul\nexport const templateSelector = '.element-template'\nexport const templateItem = document.querySelector('.element-template').content; //получаем содержимое template\n// zoom попап\nexport const popupImage = document.querySelector('.popup__image');\nexport const popupFigcaption = document.querySelector('.popup__figcaption');\n// Валидация\nexport const formInput = document.querySelector('.form__input'); // нашли инпут\n\n//\nexport const setting = {\n  formSelector: '.popup__form',\n  inputSelector: '.form__input',\n  inputErrorClass: 'form__input_type_error',\n  inputErrorClassActiv: 'form__input-error_active',\n  submitButtonSelector: '.form__submit',\n  buttonElementInactiv: 'form__submit_inactive',\n}\n","import '../pages/index.css';\nimport { Api } from \"../components/Api.js\";\nimport { Card } from \"../components/Card.js\";\nimport { FormValidator } from \"../components/FormValidator.js\";\nimport { Section } from \"../components/Section.js\";\nimport { UserInfo } from \"../components/UserInfo.js\";\nimport { PopupWithForm } from \"../components/PopupWithForm.js\";\nimport { PopupWithImage } from \"../components/PopupWithImage.js\";\nimport { PopupWithSubmmitDelete } from \"../components/PopupWithSubmmitDelete.js\";\nimport { formEdit, formAdd,formAvatar, editAvatar, nameInput , jobInput, buttonOpenEdit, buttonOpenAdd, templateSelector, setting } from \"../utils/constants.js\";\n\n//// экзм Классов попапов\nconst editPopup = new PopupWithForm('.popup_edit', handlerSubmitProfile); // попап редактирования имени, работы\nconst addFotoPopup = new PopupWithForm('.popup_add', handlerSubmitForm); // попап добавления нов карточки\nconst changeAvatarPopup = new PopupWithForm('.popup__change-avatar', handleChangeAvatar); // попап поменять аватар\nconst popupDeleteConfirm = new PopupWithSubmmitDelete('.popup_delete-card'); // попап подтв удаления карточки\n\neditPopup.setEventListeners();\naddFotoPopup.setEventListeners();\npopupDeleteConfirm.setEventListeners();\nchangeAvatarPopup.setEventListeners();\n\n//// экзм класса UserInfo\nconst infoAboutUser = new UserInfo({\n  nameSelector: '.profile__name',\n  aboutInfoSelector: '.profile__job',\n  avatarSelector : '.profile__avatar'\n});\n\n//// экзмпляр апи\nconst api = new Api({\n  url:\"https://mesto.nomoreparties.co/v1/cohort-54\", // ссылка на бэкенд\n  headers: {\n    authorization: '6fda6390-e74a-4775-b246-a9640a3f8173', // токен\n    \"Content-type\": 'application/json'\n  }\n});\n\n\nlet myId = undefined;\n\n// 1 Получение исходной информации о пользователе (обо мне)\nPromise.all( [api.getUserInfo(), api.getInitialCards()] )\n  .then(([userInfo, cards]) => {\n    infoAboutUser.setUserInfo(userInfo.name, userInfo.about, userInfo.avatar); // установили имя кот пришло в отв от сервера\n    infoAboutUser.setUserAvatar(userInfo.avatar); // установили аватар пришел в ответе от сервера\n    myId = userInfo._id\n\n    cardsSection.rendererAllItems(cards); // отрисовали\n    console.log(cards);\n  })\n  .catch(err => {\n    console.log(\"Не получилось загрузить информацию о пользователе и карточки: \", err);\n});\n\n// 3 колбэк для попапа редактирования профиля\nfunction handlerSubmitProfile(data) {\n  changeAvatarPopup.renderLoading\n  api.editingProfile (data.nickName, data.about) // м из апи - изм имя, работу и сохранить\n    .then((result) => {\n      infoAboutUser.setUserInfo(data.nickName, data.about, data.avatar); // вызвали М из UserInfo кот принимает новые данные чела и добавляет их на страницу\n    })\n    .catch(err => {\n      console.log(\"Не получилось изменить данные: \", err);\n    })\n    .finally(() => {\n      changeAvatarPopup.renderLoading(false)\n    })\n}\n\n// 6 меняем аватар\nfunction handleChangeAvatar (data) {\n  changeAvatarPopup.renderLoading(true);\n  api.updateAvatar(data.avatarlink)\n    .then((result) => {\n      infoAboutUser.setUserInfo(result.name, result.about, result.avatar);\n      changeAvatarPopup.close();\n  })\n  .catch(err => {\n    console.log(\"Не получилось обновить аватар: \", err);\n  })\n  .finally(() => {\n    changeAvatarPopup.renderLoading(false);\n  })\n}\n\n// 7 Ф поставить и снять лайк\nfunction handlePutLike(shouldLike, cardId, updateLikesList) {\n  if (shouldLike) {\n    api.addLike(cardId)\n      .then((result) => {\n        updateLikesList(result.likes);\n      })\n      .catch(err => {\n        console.log(\"Не получилось поставить like: \", err);\n      });\n  } else {\n    api.deleteLike(cardId)\n      .then((result) => {\n        updateLikesList(result.likes);\n      })\n      .catch(err => {\n        console.log(\"Не получилось снять like: \", err);\n      });\n  }\n}\n\n//////\n\n// Функция Открыть форму попапа по нажатию на кнопку редактирования профиля\nbuttonOpenEdit.addEventListener('click', () => {\n  editPopup.open(); // вызываю метод открытия из класса Popup\n\n  const profileInfo = infoAboutUser.getUserInfo(); // вызвали метод из класса UserInfo\n  nameInput.value = profileInfo.profileName;\n  jobInput.value = profileInfo.profileAboutInfo;\n\n  profileValidation.removeValidationErrors(); // вызвали метод чтобы форма всегда при открытии была чистой от ошибок поля\n});\n\n// Функция Открыть форму попапа по нажатию на кнопку добавления карточки\nbuttonOpenAdd.addEventListener('click', () => {\n  addFotoPopup.open();\n  newCardValidation.removeValidationErrors() // чтобы форма всегда при открытии была чистой от ошибок поля\n});\n\n\n////// Создание карточки\nfunction createCard(name, link, likes, cardId, ownerId) {\n\n  const handleDeleteCard = (cardId, currentCard) => {\n    const actionOnConfirm = () => {\n      api.removeCard(cardId) // удаление карточки\n        .then((result) => {\n          console.log(result);\n          currentCard.deletePhoto();\n        })\n        .catch((err) => {\n          console.log(\"Ошибка при удалении карточки: \", err);\n        })\n        .finally(() => {\n          popupDeleteConfirm.close();\n        })\n    };\n    popupDeleteConfirm.open(actionOnConfirm);\n  };\n\n  const cardElement = new Card(name, link, likes, templateSelector, cardId, myId, ownerId, handlerPreview, handleDeleteCard, handlePutLike).create(); // в конце метод\n\n  return cardElement;\n}\n\n// 4 Функция добавляет новую карточку в начало сайта от человека\nfunction addCard (name, link) {\n  addFotoPopup.renderLoading(true);\n  api.uploadNewCard (name, link) // метод из апи - добавить нов карточку с именем и ссылкой\n    .then((result) => {\n      cardsSection.addItem(createCard(result.name, result.link, result.likes, result.id, result.owner._id), false); // экзм Section, все прошло- добавим карточку на страницу\n      addFotoPopup.close();\n    })\n    .catch(err => {\n      console.log(\"Не получилось добавить новую карточку: \", err);\n    })\n    .finally(() => {\n      addFotoPopup.renderLoading(false);\n    })\n};\n\n\n// функция открывает попап с фото\nfunction handlerPreview(name, link) {\n  popupWithZoomPhoto.open(name, link);\n};\n\n// функция открыть попап изменить аватар\neditAvatar.addEventListener('click', () => {\n  changeAvatarPopup.open();\n});\n\n//\nfunction handlerSubmitForm(data) {\n  addCard(data.title, data.link);\n}\n\n\n////// ЭКЗЕМПЛЯРЫ КЛАССОВ //////\n\n//// экзм Kлассов валидации\nconst profileValidation = new FormValidator(setting, formEdit);\nconst newCardValidation = new FormValidator(setting, formAdd);\nconst avatarValidation = new FormValidator(setting, formAvatar);\n\nprofileValidation.enableValidation();\nnewCardValidation.enableValidation();\navatarValidation.enableValidation();\n\n//// экзм класса PopupWithImage\nconst popupWithZoomPhoto = new PopupWithImage('.popup_zoom');\npopupWithZoomPhoto.setEventListeners();\n\n//// экзм класса Section (добавить карточку)\nconst cardsSection = new Section ({\n  renderer: (item) => {\n    cardsSection.addItem(createCard(item.name, item.link, item.likes, item._id, item.owner._id), true); //\n  }\n  }, '.elements__list'\n);\n"],"names":["Api","url","headers","this","_url","_headers","response","ok","json","Promise","reject","status","statusText","fetch","then","_checkServerAnswer","newName","newAbout","method","body","JSON","stringify","name","about","link","id","avatarLink","avatar","Card","likes","templateSelector","cardId","myUserId","ownerId","handlePreview","handleDeleteOnClick","handlePutLike","_name","_link","_likes","_cardId","_myUserId","_ownerId","_templateItem","document","querySelector","content","_handlePreview","_handleDeleteOnClick","_handlePutLike","_haveMyLike","forEach","item","_id","_canDelete","_myHtmlElement","cloneNode","textContent","_fotoZoomOpen","src","alt","_buttonLike","_trashButton","_setListeners","_putLikes","classList","toggle","add","updateLikesList","bind","remove","evt","length","likesList","addEventListener","_likeIt","FormValidator","selectorsSetting","formToValid","_selectorsSetting","_setEventListeners","inputElement","errorMessage","errorElement","inputErrorClass","inputErrorClassActiv","validity","valid","_hideInputError","_showInputError","validationMessage","_hasInvalidInput","_buttonElement","disabled","buttonElementInactiv","_inputList","some","Array","from","querySelectorAll","inputSelector","submitButtonSelector","_toggleButtonState","_isValid","Section","containerSelector","renderer","_renderer","_container","items","element","inEnd","append","prepend","UserInfo","nameSelector","aboutInfoSelector","avatarSelector","_userName","_userAboutInfo","_userAvatar","profileName","profileAboutInfo","profileAvatar","newProfileName","newProfileAboutInfo","newProfileAvatar","Popup","popupSelector","_popup","_handleEscClose","removeEventListener","key","close","target","currentTarget","PopupWithForm","callBackSubmitForm","_callbackSubmitForm","_formInputs","_popupForm","_submitButton","_buttonDefaultText","inputValues","input","value","_submit","preventDefault","_getInputValues","reset","isSending","console","log","PopupWithImage","_imgLink","_imgFigcaption","PopupWithSubmmitDelete","_submitForm","handleConfirmDelete","_handleConfirmDelete","_confirmDelete","formEdit","formAdd","formAvatar","editAvatar","nameInput","jobInput","buttonOpenEdit","buttonOpenAdd","setting","formSelector","editPopup","data","changeAvatarPopup","renderLoading","api","editingProfile","nickName","result","infoAboutUser","setUserInfo","catch","err","finally","addFotoPopup","title","uploadNewCard","cardsSection","addItem","createCard","owner","updateAvatar","avatarlink","popupDeleteConfirm","setEventListeners","authorization","myId","undefined","shouldLike","addLike","deleteLike","cardElement","handlerPreview","currentCard","open","removeCard","deletePhoto","create","popupWithZoomPhoto","all","getUserInfo","getInitialCards","userInfo","cards","setUserAvatar","rendererAllItems","profileInfo","profileValidation","removeValidationErrors","newCardValidation","avatarValidation","enableValidation"],"sourceRoot":""}